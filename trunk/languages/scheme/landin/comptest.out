(quote a) --> (2 a 4 21)
(car (quote a)) --> (2 a 10 4 21)
(cdr (quote a)) --> (2 a 11 4 21)
(atom (quote a)) --> (2 a 12 4 21)
(cons (quote a) (quote b)) --> (2 a 2 b 13 4 21)
(add (quote a) (quote b)) --> (2 a 2 b 15 4 21)
(sub (quote a) (quote b)) --> (2 a 2 b 16 4 21)
(mul (quote a) (quote b)) --> (2 a 2 b 17 4 21)
(div (quote a) (quote b)) --> (2 a 2 b 18 4 21)
(rem (quote a) (quote b)) --> (2 a 2 b 19 4 21)
(eq (quote a) (quote b)) --> (2 a 2 b 14 4 21)
(leq (quote a) (quote b)) --> (2 a 2 b 20 4 21)
(lambda (x) (quote a)) --> (3 (2 a 5) 4 21)
(lambda (x) x) --> (3 (1 (0 . 0) 5) 4 21)
(lambda (x y) y) --> (3 (1 (0 . 1) 5) 4 21)
((lambda (x) x) (quote a)) --> (2 nil 2 a 13 3 (1 (0 . 0) 5) 4 4 21)
(let x (x quote a)) --> (2 nil 2 a 13 3 (1 (0 . 0) 5) 4 4 21)
(letrec x (x quote a)) --> (6 2 nil 2 a 13 3 (1 (0 . 0) 5) 7 4 21)
(if (quote a) (quote b) (quote c)) --> (2 a 8 (2 b 9) (2 c 9) 4 21)
> 