LiteHTTP - гипертекстовый информационный сервер
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Версия 1.2

      Copyright (C) 1994-1997 Кроникс
	    All Rights Reserved

Сервер представляет собой системную утилиту, предназначенную для
создания и сопровождения гипертекстовых информационных систем (World Wide Web).

* Операционная среда: Unix, FreeBSD, SunOS
* Протокол доступа: HTTP/0.9, HTTP/1.0, HTTP/1.1

Основные особенности данного сервера:
* Встроенная поддержка обслуживания файловых архивов
* Возможность поиска по файловым архивам
* Встроенное преобразование текстовых файлов в кодировку
  пользователя, запоминание кодировки пользователя во внутренней
  базе данных
* Препроцессорная обработка гипертекстовых файлов: вставка файлов,
  условная компиляция в соответствии с кодировкой и возможностями
  программного обеспечения пользователя
* Поддержка мультисерверного режима (multihome)
* Поддержка режима проброса (HTTP gateway)
* Ускорение обработки запросов пользователей за счет поддержки
  постоянных HTTP-соединений (keep-alive connections) и
  условной пересылки файлов (if-modified-since).


Установка
~~~~~~~~~
Сервер рассчитан на запуск из-под демона inetd.
Для установки сервера нужно включить в файл /etc/inetd.conf следующую строку:

    http stream tcp nowait nobody /usr/local/etc/liteweb liteweb -d/www

Файл /etc/services должен содержать следующую строку:

    http 80/udp

Корневым каталогом сервера будет служить каталог /www, корневым документом
- файл /www/index.html.


Статистика и трассировка
~~~~~~~~~~~~~~~~~~~~~~~~
Сообщения о своей работе сервер выдает по протоколу syslog
в режиме LOG_DAEMON с идентификатором "liteweb".

Сообщения сервера делятся на уровни приоритета:
    LOG_ERR   - ошибка сервера, обычно фатальная
    LOG_INFO  - информационная выдача, статистика
    LOG_DEBUG - отладочная информация, выдается только при наличии флага "-v"

Каждое сообщение также содержит номер процесса соответствующей копии сервера.

Чтобы перенаправить сообщения сервера в отдельный файл, следует
добавить следующие строка в системный файл конфигурации /etc/syslog.conf:

	!liteweb
	*.*             /var/log/www

При этом все сообщения сервера будут накапливаться в файле /var/log/www.


Флаги
~~~~~
При запуске сервер обрабатывает следующие флаги:
    -r            - интеллектуальная установка кодировки
    -v            - увеличить подробность диагностической информации,
		    можно повторять флаг несколько раз
    -D            - режим автономной отладки, HTTP-запрос
		    должен поступать на стандартный ввод
    -d dir        - установка корневого каталога сервера,
		    по умолчанию "/pub"
    -d ipaddr:dir - установка дополнительного корневого каталога,
		    (мультисерверный режим)
    -l unix
    -l win
    -l dos
    -l mac        - принудительная установка кодировки пользователя,
		    по умолчанию кодировка извлекается из базы

По умолчанию, если клиент не найден в базе кодировки (см. соответствующий
раздел), используется режим английской диагностики и кодировка КОИ-8.
Флаг "-r" включает режим автоматической установки кодировки,
при котором для доменов .su/.ru/.ua/.by устанавливается русский режим
и кодировка в соосветствии с операционной средой пользователя:
Unix/Windows/Macintosh.


Мультисерверный режим
~~~~~~~~~~~~~~~~~~~~~
Сервер позволяет создавать на одном компьютере несколько независимых
виртуальных WWW-серверов (multihome mode).  Для этого компьютер должен иметь
несколько IP-адресов (см. например ifconfig alias).  Каждому WWW-серверу
ставится в соответствие отдельный IP-адрес (и доменное имя).  При поступлении
HTTP-запроса сервер определяет IP-адрес, к которому производится обращение,
находит соответствующий корневой каталог (см. флаг "-d") и обрабатывает
запрос относительно этого каталога.

Для пользователя все виртуальные WWW-сервера выглядят как независимые,
хотя в реальности они располагаются и сопровождаются на одном компьютере.


Проброс
~~~~~~~
Сервер предоставляет возможность создавать распределенные WWW-сервера,
когда информация располагается на нескольких независимых компьютерах,
но для пользователя выглядит как единый WWW-сервер.
Для этого имеется т.н. режим проброса HTTP-запросов.
Создав в корневом каталоге сервера файл ".forward" со следующим
содержимым:

    # what     host:port           path
    #-----------------------------------------
    /alpha     www.alpha.net:1234  /dir/name/
    /beta      www.beta.net:5678   /some/where/

можно подключить сервера www.alpha.net (порт 1234, каталог /dir/name) и
www.alpha.net (порт 1234, каталог /some/where) к текущему серверу
в виде виртуальных каталогов /alpha и /beta.

Например, запрос "GET /alpha/xxx" будет выполняться сервером как
запрос "GET http://www.alpha.net:1234/dir/name/xxx".


Режимы обработки документа
~~~~~~~~~~~~~~~~~~~~~~~~~~
Сервер использует поле "User-Agent" HTTP-запроса для определения
режима обработки гипертекстовых документов.
Есть три режима:

	TEXT    - текстовый режим
	GRAPH   - графический режим
	TABLES  - поддержка таблиц

Текстовый режим устанавливается для клиентов типа "Lynx" и "CERN LineMode"
или при отсутствии пола "User-Agent".  В остальных случаях
устанавливается графический режим.

Режим поддержки таблиц устанавливается для Netscape ("Mozilla")
и Microsoft Internet Explorer (MSIE).


База кодировки пользователей
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Сервер предоставляет возможность создавать двуязычные информационные
системы (русский/английский языки) с поддержкой различных кодировок
кириллицы (koi8-r/Unix, Windows, MSDOS, Macintosh).
Все локальные русскоязычные документы должны храниться в кодировке кои8.

Пользователь имеет возможность, заполнив специальную форму,
установить для себя нужный язык и кодировку.
Форма обрабатывается специальной CGI-утилитой /exec/encoding (на языке python),
и информация о пользователе заносится в базу "/var/db/liteweb/user.db".
При поступлении первого запроса сервер находит запись о пользователе
в базе, и использует соответствующие язык и кодировку.
Если запись не найдена, используется аглийский язык и кодировка кои8.

Запись в базе состоит из ключа и данных.
Структура ключа:
 * 4 байта - IP-адрес сервера (локальный порядок байтов)
 * 4 байта - IP-адрес пользователя (локальный порядок байтов)
 * 1 байт - тип операционной среды пользователя
	(1 - неизвестно, 2 - X Windows, 3 - Macintosh, 4 - Windows NT,
	5 - Windows 95, 6 - Microsoft Windows)
 * 1-32 байта - идентфикатор программного обеспечения WWW-клиента
	(например Mozilla, Lynx и т.п.)
Структура данных:
 * 4 байта - дата регистрации пользователя, секунды от 0:0 1.1.70.
 * 1 байт - кодировка (1 - английский, 2 - кои8, 3 - Windows,
	4 - MSDOS, 5 - Macintosh)

Администратор может просмотреть базу кодировки пользователей утилитой "showdb".


Режим постоянного соединения
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
В сервере реализованы "постоянные" HTTP-соединения (keep-alive connections),
как описано в спецификации протокола HTTP/1.1.
Это приводит к резкому ускорению темпа обработки пользовательских
запросов за счет уменьшения расходов времени на установление
нового TCP-соединения на каждый запрос.

Некоторые WWW-клиенты, в частности Netscape, устанавливают несколько
параллельных соединений с сервером, и при запросе документа с большим
количеством графических вставок выдают серверу несколько запросов
одновременно, что также ускоряет работу пользователя.  Это приводит
к запуску нескольких экземпляров сервера, что несколько повышает нагрузку
на операционную систему.  Для уменьшения расхода оперативной памяти
сервер был оптимизирован по размеру.

Постоянное соединение принудительно закрывается,
если запросы от клиента не поступали в течение 5 минут.


Режим proxy
~~~~~~~~~~~
В версии LiteWeb 1.2 режим proxy не реализован.


Запуск внешних исполнителей
~~~~~~~~~~~~~~~~~~~~~~~~~~~
В сервере реализован протокол CGI версии 1.1.
Все внешние исполнители должны располагаться в подкаталоге "/exec"
корневого каталога сервера.  Обращения к файлам, имена которых
начинаются со строки "/exec" сервер обрабатывает как запуск внешнего
исполнителя, например, запрос

	GET /exec/abra/ca/dabra?hihi

будет выполнен как запуск утилиты /exec/abra с параметрами
PATH_INFO="/ca/dabra", QUERY_STRING="hihi", HOME="/exec".

Для реализации служебных CGI-утилит сервера выбран язык Python,
который имеет встроенную поддержку CGI и характеризуется
высокой универсальностью и скоростью выполнения.

При запуске внешнего исполнителя сервер передает ему, используя
глобальные переменные, следующие параметры:

	  SERVER_PROTOCOL = HTTP/1.0
	  SERVER_SOFTWARE = LiteWeb/1.2
	GATEWAY_INTERFACE = CGI/1.1
	   REQUEST_METHOD = GET/HEAD/POST
	      SERVER_NAME = <host-имя сервера>
	      SERVER_ADDR = <IP-адрес сервера>
	      SERVER_PORT = <TCP-порт сервера>
	      REMOTE_ADDR = <IP-адрес пользователя>
(*)           REMOTE_HOST = <host-имя пользователя>
	   CONTENT_LENGTH = <длина запроса в байтах>
(*)          CONTENT_TYPE = <поле Content-Type запроса>
(*)          QUERY_STRING = <строка поиска>
	      SCRIPT_NAME = <имя файла исполнителя>
		PATH_INFO = <путь файла запроса>
		     HOME = <каталог исполнителя>
(*)              HTTP_xxx = <поле xxx запроса>

Параметры, помеченные знаком (*), могут отсутствовать.
Исполнитель должен при нормальном завершении возвращать статус 0.


Обработка карт (clickable maps)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Если объект запроса представляет собой файл и имеет расширение ".map",
то запрос обрабатывается как обращение к карте.
Карта - это графический объект, к которому приписано некоторое количество
гипертекстовых ссылок.  Нажатие мышки на объекте транслируется
в HTTP-запрос к серверу, и в ответ формируется соответствующая гипертекстовая
ссылка на нужный документ.

Описания карт хранятся в (текстовых) файлах с расширением ".map".
Пустые строки, а также строки, начинающиеся с символа '#', игнорируются.
Остальные строки содержат описания областей карты и связанных с ними
гипертекстовых ссылок.

rect REF X1,Y1 X2,Y2
	Прямоугольная область.  Граничные точки считаются частью области.

circle REF X1,Y1 X2,Y2
	Круг с центром в точке (X1,Y1), проходящий через точку (X2,Y2).

poly REF X1,Y1 X2,Y2 ... Xn,Yn
	Выпуклый многоугольник.

point REF X,Y
	Точка.  Если координаты запроса не соответствуют
	ни одному из объектов типа rect/circle/poly, то используется
	ближайшая по расстоянию точка.

default REF
	Ссылка по умолчанию.  Если координаты запроса не соответствуют
	ни одному из остальных объектов, то используется ссылка
	по умолчанию.  Имеет смысл только при отсутствии объектов типа point.

Объекты типа rect/circle/poly обрабатываются в порядке следования в файле.


Обработка файлов
~~~~~~~~~~~~~~~~
Если объект запроса представляет собой файл (с расширением, отличным от ".map"),
то указанный файл выдается как результат запроса.
Имя файла и ведущих к нему каталогов не может начинаться с точки.
Если в запросе присутствует поле If-Modified-Since и (нетекстовый) файл
не изменялся с указанного времени, то возвращается ответ типа
"304 Document not modified".  Для текстового файла учитывается также
дата смены пользователем кодировки в базе.

Текстовость файла определяется по расширению.
Текстовые расширения:
	.C      .S      .c      .cc     .csh    .etx    .f90    .h
	.hh     .html  ..m      .man    .me     .ms     .roff   .rtx
	.s      .sh     .shar   .t      .tcl    .tex    .texi   .texinfo
	.tr    .txt     .xbm    .xpm
Нетекстовые расширения:
	.JPE    .JPEG   .JPG    .MPE    .MPEG   .MPG    .PS     .Z
	.z      .ai     .aif    .aifc   .aiff   .arj    .au     .avi
	.bin    .cpio   .dvi    .eps    .exe    .gif    .gz     .ief
	.jpe    .jpeg   .jpg    .lzh    .mov    .movie  .mpe    .mpeg
	.mpg    .pbm    .pdf    .pgm    .pnm    .ppm    .ps     .qt
	.ras    .rgb    .rtf    .snd    .tar    .tgz    .tif    .tiff
	.wav    .xwd    .zip    .zoo
Файлы, имеющие неизвестное расширение, считаются текстовыми,
если они в первом килобайте не содержат нетекстовых символов.

Файлы с расширением ".html" обрабатываются препроцессором.


Препроцессор
~~~~~~~~~~~~
Препроцессор предназначен для динамической обработки HTML-файлов
(при выдаче их клиенту) в соответствии с языком и кодировкой клиента.
Препроцессор производит также подстановку файлов, что упрощает
создание и сопровождение сложных документов и архивов.

Директивы препроцессора имеют формат HTML-комментариев,
и могут находиться в произвольном месте HTML-документа.
Следует учитывать, что все пробелы, табуляции и концы строк,
непосредственно следующие за директивой препроцессора,
удаляются из выходного потока.

Директивы препроцессора:

<!--#include FILENAME-->
	- Подстановка файла.  Имя файла берется относительно положения
	документа.  Абсолютное имя берется относительно WWW-корня сервера.

<!--#path-->
	- Подстановка полного имени текущего документа.

<!--#dir-->
	- Подстановка имени каталога, в котором находится текущий документ.

<!--#if EXPR-->
<!--#elif EXPR-->
<!--#else-->
<!--#endif-->
	- Условная компиляция, в зависимости от истинности выражения EXPR.
	Формат выражения:
		EXPR = VAR | '!' VAR
		VAR = TEXT | GRAPH | TABLES | ENG | KOI8 | WIN | DOS | MAC

Максимальная глубина вложенности директив #include и #if - 10 уровней.


Обработка каталогов
~~~~~~~~~~~~~~~~~~~
Если запрос содержит шаблон поиска, производится поиск по каталогу
(см. соответствующий раздел).
Иначе, если в каталоге имеется файл "index.html", он выдается в качестве ответа.
Иначе формируется и выдается HTML-документ, содержащий список файлов,
находящихся в каталоге.

Если в запросе присутствует поле If-Modified-Since и каталог, а также все файлы
не изменялись с указанного времени, то возвращается ответ типа
"304 Document not modified".  Учитывается также дата смены пользователем
кодировки в базе.

В формировании документа участвуют только подкаталоги, регулярные файлы,
а также символические ссылки на каталоги и файлы.  Файлы с именами,
начинающимися с точки, а также файлы-устройства и спецфайлы игнорируются.

Имена сортирубтся по типу (каталог/файл) и по имени.

Комментарии к каталогу и файлам берутся из первой строки файлов
"../.info/DIRNAME" и ".info/FILENAME" соответственно.

В начало и конец формируемого документа вставляются файлы заголовка
и окончания ".header.inc" и ".footer.inc", обработанные препроцессором.
Файл заголовка, если он существует, вставляется ВМЕСТО директивы <body>
и должен ее содержать.  Эта особенность служит для изменения расцветки
документа посредством параметров директивы <body>.

Файлы заголовка и окончания должны находиться в подкаталоге первого уровня
(для корневого каталога - в корне).  Например, при запросе
"GET /abra/ca/dabra/" в документ подставляются файлы "/abra/.header.inc" и
"/abra/.footer.inc"

Документ формируется либо в виде таблицы (в режиме TABLES), либо в виде
преформтированного текста.

Если в каталоге имеется файл ".index", то в документ добавляется
форма для поиска.

Если в каталоге имеется файл "README" либо "README.TXT", то он
дописывается в конец документа в преформатированном виде.

Для каждого каталога или файла в результирующем документе
указывается графический значок, отражающий тип файла:

/icons/back.gif       - для ссылки на родительский каталог
/icons/dir.gif        - для каталогов
/icons/text.gif       - для текстовых файлов
/icons/binary.gif     - для нетекстовых файлов
/icons/unknown.gif    - для файлов, недоступных на чтение
/icons/pstscrpt.gif   - для файлов типа application/postscript
/icons/acrobat.gif    - для файлов типа application/pdf
/icons/compressed.gif - для файлов типа: application/x-arj
			application/x-compress application/x-gzip
			application/x-lzh application/x-zoo application/zip
/icons/image2.gif     - для файлов типа: image/cmu-raster image/gif image/ief
			image/jpeg image/tiff image/x-portable-anymap
			image/x-portable-bitmap image/x-portable-graymap
			image/x-portable-pixmap image/x-rgb image/x-xbitmap
			image/x-xwindowdump
/icons/movie.gif      - для файлов типа: video/mpeg video/quicktime
			video/x-msvideo video/x-sgi-movie
/icons/sound2.gif     - для файлов типа: audio/basic audio/x-aiff audio/x-wav
/icons/tar.gif        - для файлов типа: application/x-cpio application/x-tar


Поиск по каталогу
~~~~~~~~~~~~~~~~~
Поиск представляет собой обращение к каталогу с указанием шаблона:

	GET /abra/ca/dabra/ ? шаблон
или
	GET /abra/ca/dabra/ ? query = шаблон

В каталоге должен присутствовать файл ".index", содержащий
рекурсивный список всех файлов каталога с комментариями.

Шаблон поиска может содержать следующие спецсимволы:

	?       - любой символ
	*       - любая строка (в том числе пустая)
	!       - в начале шаблона - отрицание
	^       - в начале шаблона - начало строки
	$       - в конце шаблона - конец строки
	[a-z]   - символ в диапазоне
	[^a-z]  - символ вне диапазона
	[!a-z]  - символ вне диапазона

В начало и конец формируемого документа вставляются файлы заголовка
и окончания ".header.inc" и ".footer.inc" (см. обработку каталогов).

Индексный файл .index имеет следующий формат:

	<путь файла> YYMMDD <описание файла>

Описание файла может отсутствовать.
Например:
	README 951118 Read it!
	2.0.5-RELEASE/INSTALL 950610 How to install
	2.0.5-RELEASE/manpages/ Manual pages distribution
	2.0.5-RELEASE/xperimnt/gap/gap3r4p2/pkg/anupq/isom/nott.com 921206

Для каждой строки индексного файла шаблон последовательно сравнивается
с базовым именем файла и строкой описания.
Если сравнение прошло успешно, этот файл добавляется к результирующему
документу.
