Краткое описание почтового сервера Usenet.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Copyright (C) 1991-1994 Сергей Вакуленко

Сервер предназначен для рассылки статей из телеконференций USENET
при помощи обычной электронной почты.  Для работы сервера
необходимо иметь установленный пакет CNEWS.

Сервер разработан Сергеем Вакуленко.  Автор сохраняет за собой
все права на данное матобеспечение.  Автор также выражает признательность
Алексею Рудневу за конструктивную критику и важные доработки
в сторону повышения надежности сервера, а также Сергея Рыжкова
за помощь в реализации и отладке режима упаковки.

Версия сервера 2.7 создана из версии 2.5 Рудневым Алексеем.
Сервер является коммерческим продуктом, доступным бесплатно
узлам сети Eunet-Relcom.


Дистрибутив сервера состоит из:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) файла README

2) текстов компонент сервера

    daemon.c            - демон сервера, запускает server, newnews, notify
    server.c, server.h  - собственно сервер, обслуживающий заявки
    newnews.c           - рассылка статей по feed
    notify.c            - рассылка списков статей по notify
    commands.c          - обработка команд сервера
    reader.c            - чтение заявок
    groups.c, groups.h, tagdefs.h - работа с базой данных подписки
    compack.c           - упаковка/распаковка статей
    header.c, header.h  - разбор заголовков писем и статей
    rfcdate.c           - обработка даты в соответствии с RFC 1036
    send.c              - рассылка статей в виде писем
    submit.c            - посылка статьи в телеконференцию
    gclass.c            - вычисление класса телеконференции
    lang.c, lang.h      - двуязычная диагностика
    configure.c, config.h - чтение файла конфигурации
    vdbm.c, vdbm.h      - ведение базы данных в памяти
    ut.c                - вспомогательные функции
    patchlevel.h        - текущий номер версии сервера

3) текстов программ сопровождения сервера

    nsadmin.c           - утилита администратора
    nscheck.c           - проверка корректности базы данных подписки
    nsconvert.c         - преобразование базы данных
    startup.sh          - запуск сервера (из /etc/rc)
    killdaemon.sh       - останов сервера
    backup.sh           - сохранение копий базы данных и статистики
			  (ежедневно по cron)

4) текстов простой программы распаковки статей для Unix и MSDOS

    unbatch.c           - распаковка статей

5) программ распаковки для Unix и MSDOS в формате UUENCODE

    unbatch-286         - программа UNBATCH для Xenix 286
    unbatch-386         - программа UNBATCH для Unix 386
    unbatch-dos         - программа UNBATCH для MSDOS
    unbatch-src         - тексты программы UNBATCH
    uunpack-286         - программа UUNPACK для Xenix 286
    uunpack-dos         - программа UUNPACK для MSDOS
    uunpack-src         - тексты программы UUNPACK

6) примерных файлов конфигурации сервера

    config              - файл конфигурации
    users               - список разрешенных/запрещенных адресов
    groups_list         - список разрешенных/запрещенных групп
    classes             - деление телеконференций на классы
    gclasses            - деление телеконференций на классы при посылке
    help                - информация, выдаваемая по команде HELP (англ.)
    rhelp               - информация, выдаваемая по команде HELP (рус.)

7) текстов библиотеки GDBM

    gdbm/               - библиотека GNU DBM

8) файлов сборки сервера

    Makefile            - файл сборки для make
    mkversion.sh        - обновление файла patchlevel.h

В дистрибутиве может присутствовать каталог RCS - архив предыдущих
версий сервера.


Для сборки сервера необходимо:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) Поправить файл Makefile.  Найдите и раскомментируйте
строки с определениями OSFLAGS и LIBS, соответствующими
Вашей операцинной системе.  Раскомментируйте строку "CC=gcc",
если у Вас установлен компилятор GNU C. Поставить в систему библиотеку
SUN RPC, которая обычно входит в пакет NFS.

2) Дать команду "make".  Произойдет компиляция и сборка всех компонент
сервера.


Для установки сервера в систему необходимо:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) Выбрать каталог в операционной системе, в котором
будет установлен сервер.  По умолчанию это /usr/spool/newsserv.
Если Вы хотите использовать другой каталог, поправьте Makefile,
config.h, config и *.sh.

2) Поправить файл config, настроив параметры в соответствии
с Вашей конфигурацией системы.  Установите правильное имя Вашего
домена (параметр mydomain), оно должно начинаться с символа '@'.

3) Введите в файл users список разрешенных адресов,
в случае, если Вы хотите ограничить список доступа к серверу.
Аналогично, отредактируйте файл groups_list, если вы хотите
ограничить доступ к каким то группам.

4) Скорректировать файлы информации о сервере help и rhelp
в соответствии с местными особенностями.

5) Дать команду "make install".  Компоненты сервера будут
переписаны на соответствующие места.

6) Создать пользователя newsserv, от имени которого будет
происходить работа сервера.  Если Вы хотите работать
под другим именем, исправьте файлы startup.sh и killdaemon.sh.

7) В стартовый файл операционной системы вставить строку
запуска сервера. Например, для операционной системы
Interactive Unix 386 V.3 или V.4 нужно создать
файл /etc/rc2.d/S95newsserv со строкой:

    /usr/spool/newsserv/bin/startup

8) В таблицу для cron вставить все нужные вызовы, подкорректировав их.
Образец находится в файле newsserv.cron:

#
30 1,13        * * * /usr/spool/newsserv/bin/backup
7  *           * * * /usr/spool/newsserv/bin/newnews
3  6,12,18,0      * * * /usr/spool/newsserv/bin/start_notify


9) Если вы хотите, чтобы у вас рассылка списков и рассылка статей
шли в определенные часы, установите период их вызова в config в 0
и добавьте строки для их вызова в cron:

    0 6 * * * /usr/spool/newsserv/bin/backup

Схема функционирования сервера.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Сервер в процессе работы выполняет три основных действия:
1) прием и обработка заявок;
2) рассылка статей;
3) рассылка списков статей.
Эти функции выполняются отдельными компонентами (server, newnews и notify),
работой которых управляет daemon.

DAEMON постоянно находится в процессоре и отслеживает состояние
почтового ящика сервера /usr/spool/mail/newsserv (задается
параметром mailbox в config).  Если почтовый ящик непуст,
он разбивается на отдельные письма, которые переносятся
в каталог /usr/spool/newsserv/queue и образуют очередь
необработанных заявок.  Список файлов-заявок заносится
в файл /usr/spool/newsserv/queueactive и демон приступает
к их обработке.  На каждую заявку по очереди запескается
обработчик - программа server.  После успешной обработки
заявка удаляется из очереди.
Периодически, например, каждый час (параметр feedtime) демон прерывает
обработку заявок и запускает компоненту newnews, которая рассылает
новые статьи подписчикам в режиме feed и готовит списки для notify.
Также периодически, например, два раза в сутки (параметр notifytime)
демон запускает компоненту notify, которая рассылает списки статей
подписчикам режима notify.

SERVER получает на стандартный ввод текст письма-заявки,
содержащего набор команд для сервера либо статью
для посылки в телеконференцию.  Заявка обрабатывается,
в результате чего пользователь подписывается либо отключается
от телеконференции, заказывает статьи, пр.  Результат
обработки заявки отсылается по адресу пользователя.
Если заявка содержит новую статью (поле Newsgroups:),
она передается CNEWS для занесения в телеконференцию.

NEWNEWS сравнивает текущее состояние файла /usr/lib/news/active
со своей базой данных, вычисляя список новых статей, которые
нужно разослать пользователям.  Список обрабатывается с целью
избежать рассылки дубликатов статей одному и тому же пользователю.
По возможности статьи группируются в пакеты и сжимаются,
что позволяет уменьшить общий траффик.  Затем пакеты и отдельные
статьи, соответствующие режиму feed рассылаются пользователям,
причем максимально используя возможность посылки одинаковых
пакетов по группе адресов.  Информация о статьях, соответствующих
режиму notify сохраняется в файлах /usr/spool/newsserv/new?.
Также в файлах /usr/spool/newsserv/newgroups и /usr/spool/newsserv/oldgroups
составляется список новых/удаленных групп.
Компонента newnews также производит восстановление таблицы подписки
после сбоя.  Если сервер по каким-то причинам слишком долго
не функционировал, может случиться ситуация, в которой он решит
разослать сотни мегабайт информации тысяче подписчиков.
Newnews отлавливает такую ситуацию следующим образом.
Если он обнаруживает, что появилось слишком много новых статей
(параметр maxnewarticles, по умолчанию 12000) или слишком много
новых групп (параметр maxnewgroups, по умолчанию 100),
сервер решает, что был сбой и статьи рассылать не надо.
Newnews просто синхронизирует таблицу подписки с текущим
состоянием /usr/lib/news/active, выдает диагностику об этом
и заканчивает работу.

NOTIFY читает списки новых статей и новых/удаленных групп,
подготовленные newnews, и рассылает их подписчикам.
Для облегчения сортировки списка статей, который
на больших системах может достигать десятков мегабайт,
список разделяется на несколько файлов по первой букве
адреса пользователя. Кроме того, notify проводит старение
подписки - если пользователь в течении timeoflife дней не разу
не обратился к серверу, и не заблокировал свою подписку командой
AGING off, notify удалит его из системы (послав ему предварительно
3 предупреждения). Для контроля используется дата последней
проверки старения, которая определяется по дате записи в файл
lastaging.

Диагностика и статистика сервера.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Диагностические сообщения о работе сервера накапливаются
в файле /usr/spool/newsserv/log (параметр log в config).
При этом важные сообщения об ошибках помечены словом +ERR+.

Пример файла log:

26.07.93/13:32:12  d +ERR+  Can't lock daemonpid
26.07.93/13:32:19  d  queued 18152 from bitcom.kiae.su!root
26.07.93/13:32:20  s  send protocol to root@bitcom.kiae.su, 13147 bytes
26.07.93/13:32:21  d  processed /usr/spool/newsserv/queue/q18152
26.07.93/13:33:21  d  queued 18153 from newcom.kiae.su!smu4.smolensk.su!Dolg
26.07.93/13:33:21  d  queued 18154 from newcom.kiae.su!lord.donetsk.ua!stiv
26.07.93/13:33:21  d  queued 18155 from newcom.kiae.su!lord.donetsk.ua!stiv
26.07.93/13:33:21  d  queued 18156 from newcom.kiae.su!rla.msk.su!imois
26.07.93/13:33:21  d  queued 18157 from newcom.kiae.su!rla.msk.su!andrey
26.07.93/13:33:22  s  aging flushed: Dolg@smu4.smolensk.su
26.07.93/13:33:30  s  user Dolg@smu4.smolensk.su removed
26.07.93/13:33:31  s  send protocol to Dolg@smu4.smolensk.su, 193 bytes
26.07.93/13:33:31  d  processed /usr/spool/newsserv/queue/q18153
26.07.93/13:33:32  s  article from stiv@lord.donetsk.ua submitted to ukr.commerce.machinery
26.07.93/13:33:32  d  processed /usr/spool/newsserv/queue/q18154
26.07.93/13:33:33  s  article from stiv@lord.donetsk.ua submitted to ukr.commerce.misc
26.07.93/13:33:33  d  processed /usr/spool/newsserv/queue/q18155
26.07.93/13:33:33  s  aging flushed: imois@rla.msk.su
26.07.93/13:33:34  s  send protocol to imois@rla.msk.su, 12810 bytes
26.07.93/13:33:34  d  processed /usr/spool/newsserv/queue/q18156

Первое поле содержит дату и время сообщения.  Второе поле определяет
источник сообщения:

    d   - daemon
    s   - server
    f   - newnews
    n   - notify

Статистика по рассылаемым статьям заносится
в файл /usr/spool/newsserv/outstat.
Пример файла outstat:

04.06.92/12:08:18  1769  L-relcom  vak@kiae.su
04.06.92/12:08:21  3245  L-usenet  vak@kiae.su sir@rd.relcom.msk.su

Первое поле задает дату/время, второе - размер посылки в байтах,
третье - класс телеконференции, четвертое и дальше - адреса,
по которым происходила рассылка.

Статистика по принимаемым статьям заносится
в файл /usr/spool/newsserv/instat.
Пример файла instat:

07.06.92/21:38:28  679  vak@kiae.su  L-relcom L-ukrain
07.06.92/21:38:33  1673  sir@rd.relcom.msk.su  L-postmasters

Первое поле задает дату/время, второе - размер посылки в байтах,
третье - адрес автора письма, четвертое и дальше - классы телеконференций.
Классов телеконференций может быть несколько, если статья
посылается сразу в несколько групп.

База данных сервера.
~~~~~~~~~~~~~~~~~~~

База данных сервера лежит в файле groups в формате gdbm.
При этом сервер ведет файл изменений (groups+), а когда он
накапливается слишком большим, создает новую копию основной
базы 'groups'. База содержит в себе:

- список пользователей сервера в прямом (пользователь, номер) и
обратном (номер, пользователь) виде.
- список групп в прямом и обратном виде.
- список подписки (номер_группы, {номер_пользователя, тип_подписки})
- внутреннее состояние active - (номер_группы, макс. номер. статьи)
- флаги пользователя (номер, флаги) - PACK, старение.

В основной версии сервера с базой работает отдельный процесс - rgroupd.
Он запускается в startup, может быть перезапущен автоматически при
сбое, и постоянно должен находиться в процессоре. rgroupd работает с
клиентами (server, daemon, newnews, notify) через аппарат RPC (remote
procedure Call) по протоколу TCP/IP. Работа его требует установки TCP/IP
и запуска ведущей программы RPC 'portmap'. Сервер блокирует базу
данных.

Для проверки корректности базы служит программа nscheck. Она должна запускаться
перед вызовом rgroupd (например, при начальной загрузке системы), и
проверять соответствие всех таблиц базы друг другу. Вызов nscheck
происходит при вызове bin/startup автоматически.

Для сохранности сервер делает back-up-ы. В качестве back-up используется
предыдущий вариант файла groups (groups~), который переименовывается
программой backup в groups.1, groups.2 (более старый) и так до groups.7.z
(groups.7, запакованный gzip-ом). При восстановлении с бэк-апа рекомендуется
убрать файл groups+ , и сбросить неразосланные статьи. Однако само такое
восстановление может реально понадобиться только при поломках самой
операционной системы, так как при нормальной работе в каждый момент времени
файл groups находится в корректном состоянии, а groups+ только дозаписывается
и тоже не может содержать некорректную информацию (к тому же она при
чтении проверяется). На практике за год работы системы на OS ISC Unix
(весьма ненадежной при большой загрузке) база данных разрушилась 1 раз,
и была восстановлена из первой копии.

Утилиты для сопровождения сервера.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Запуск сервера.
~~~~~~~~~~~~~~~
Команда /usr/spool/newsserv/bin/startup
формирует новый список необработанных заявок
/usr/spool/newsserv/queueactive, проверяет корректность
базы данных /usr/spool/newsserv/groups посредством
утилиты nscheck и запускает daemon.  Должна вызываться
из стартового файла операционной системы (/etc/rc).
Если команда вызвана не от пользователя root,
она спросит пароль пользователя newsserv.

Останов сервера.
~~~~~~~~~~~~~~~~
Команда /usr/spool/newsserv/bin/killdaemon
останавливает сервер посредством посылки сигнала демону,
который оставляет номер своего процесса в файле
/usr/spool/newsserv/daemopid.
Если команда вызвана не от пользователя root,
она спросит пароль пользователя newsserv.

Сохранение копий базы данных и статистики.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Чтобы накопление диагностики и статистики не привело
к переполнению дискового пространства, команда
/usr/spool/newsserv/bin/backup осуществляет переименование
файлов log, instat и outstat.  Кроме текущей, хранится еще
семь версий этих файлов.  Переименование происходит по схеме:

    log.6 -> log.7   instat.6 -> instat.7   outstat.6 -> outstat.7
    log.5 -> log.6   instat.5 -> instat.6   outstat.5 -> outstat.6
    log.4 -> log.5   instat.4 -> instat.5   outstat.4 -> outstat.5
    log.3 -> log.4   instat.3 -> instat.4   outstat.3 -> outstat.4
    log.2 -> log.3   instat.2 -> instat.3   outstat.2 -> outstat.3
    log.1 -> log.2   instat.1 -> instat.2   outstat.1 -> outstat.2
    log   -> log.1   instat   -> instat.1   outstat   -> outstat.1

Кроме этого, backup производит сохранение копий базы данных groups
по схеме:

    groups.dir~ -> groups.dir~~   groups.pag~ -> groups.pag~~
    groups.dir  -> groups.dir~    groups.pag  -> groups.pag~

Команда backup должна вызываться ежесуточно посредством cron.

Проверка корректности базы данных.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Утилита /usr/spool/newsserv/bin/nscheck производит проверку
коррекности базы данных /usr/spool/newsserv/groups.
При обнаружении некорректных записей производится
их исправление или удаление.

Преобразование базы данных.
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Утилита /usr/spool/newsserv/bin/nsconvert проебразует
файл подписки предыдущей версии сервера (текстовый формат)
в формат DBM.

Управление базой данных подписки.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Утилита /usr/spool/newsserv/bin/nsadmin позволяет
просматривать таблицу подписки, добавлять и удалять
пользователей и группы, включать и отменять подписку
пользователей.

В приведенном ниже описании используются следующие
обозначения:

	<user>  -u user... | -U upat...
	<group> -g group... | -G gpat...

Выдача списка пользователей:

	nsadmin list [ <user> ]

Выдача списка телеконференций:

	nsadmin list <group>

Выдача таблицы подписки для пользователей:

	nsadmin check [ <user> ]

Выдача таблицы подписки для телеконференций:

	nsadmin check <group>

Добавление новых пользователей:

	nsadmin add -u user...

Добавление новых телеконференций:

	nsadmin add -g group...

Удаление пользователей:

	nsadmin rem <user>

Удаление телеконференций:

	nsadmin rem <group>

Подключение пользователей к телеконференциям в режиме уведомления.

	nsadmin sub <user> <group>

Подключение пользователей к телеконференциям в режиме подписки.

	nsadmin feed <user> <group>

Подключение пользователей к телеконференциям в режиме ограниченной подписки.
Здесь <limit> - макcимальная длина статьи в килобайтах.

	nsadmin rfeed <limit> <user> <group>

Отмена подписки пользователей.

	nsadmin uns <user> [ <group> ]

Отмена подписки на телеконференции.

	nsadmin uns <group>

Вывод таблицы подписки во внутреннем формате (для отладки).

	nsadmin dump

Синхронизация таблицы подписки с файлом /usr/lib/news/active.

	nsadmin sync [ <group> ]
